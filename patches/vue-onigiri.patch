diff --git a/dist/runtime/serialize.js b/dist/runtime/serialize.js
index ee4dc49168846a9f070b8271ec8655edd03386ff..b29a801b375bb6e668ebeccf8d6d8326e6b08130 100644
--- a/dist/runtime/serialize.js
+++ b/dist/runtime/serialize.js
@@ -28,6 +28,7 @@ export function serializeApp(app, context = {}) {
   const vnode = createVNode(input._component, input._props);
   const instance = createComponentInstance(vnode, input._instance, null);
   instance.appContext = input._context;
+  instance.provides = (input._context.provides);
   return app.runWithContext(async () => {
     const res = await setupComponent(instance, true);
     return await app.runWithContext(async () => {
@@ -120,6 +121,9 @@ export async function serializeVNode(vnode, parentInstance) {
             }
             console.warn("Component is missing chunk information");
           }
+          if(child.shapeFlag & ShapeFlags.ELEMENT) {
+            return serializeVNode(child, parentInstance);
+          }
           return [
             VServerComponentType.Fragment,
             serializeChildren(child.children, parentInstance)
@@ -225,6 +229,9 @@ function renderComponent(_vnode, parentInstance) {
     });
     return p.then(() => {
       const vnode = renderComponentRoot(instance);
+      if(vnode.shapeFlag & ShapeFlags.COMPONENT) {
+        return renderComponent(vnode, instance);
+      }
       const { dirs: dirs2, props: props2 } = vnode;
       if (dirs2) {
         vnode.props = applySSRDirectives(vnode, props2, dirs2);
@@ -234,6 +241,9 @@ function renderComponent(_vnode, parentInstance) {
     });
   }
   const child = renderComponentRoot(instance);
+      if(child.shapeFlag & ShapeFlags.COMPONENT) {
+        return renderComponent(child, instance);
+      }
   const { dirs, props } = child;
   if (dirs) {
     child.props = applySSRDirectives(child, props, dirs);
diff --git a/dist/vite/chunk.js b/dist/vite/chunk.js
index bbf89c47dba800aef026ca58b56de6bc40eef382..9e583d44651d75455af0cef943f517444485a0cc 100644
--- a/dist/vite/chunk.js
+++ b/dist/vite/chunk.js
@@ -3,6 +3,7 @@ import { join, normalize, relative } from "node:path";
 import { readFileSync } from "node:fs";
 import vue from "@vitejs/plugin-vue";
 import { defu } from "defu";
+import { hash} from "ohash"
 import { glob } from "node:fs/promises";
 function normalizePath(path) {
   return normalize(path).replaceAll("\\", "/");
@@ -52,6 +53,23 @@ export function vueOnigiriPluginFactory(options = {}) {
             options.rootDir = config.root;
           }
         },
+        
+        load(id) {
+
+          
+            if(id === 'virtual:vue-onigiri') {
+              return `
+              import { defineAsyncComponent } from "vue";
+              export default {
+                ${clientChunks.map(chunk =>
+                  chunk.exports.map(exportName =>
+                    `"${normalizePath(join("/", isProduction ? normalize(chunk.id) : relative(rootDir, normalize(chunk.id))))}#${exportName}": defineAsyncComponent(() => import("${chunk.originalPath}").then(m => m.${exportName}))`
+                  ).join(",\n")
+                ).join(",\n")}
+              }
+              `
+            }
+        },
         async buildStart() {
           const chunksToInclude = Array.isArray(options.includeClientChunks) ? options.includeClientChunks : [options.includeClientChunks || "**/*.vue"];
           await Promise.all(chunksToInclude.map(async (file) => {
@@ -66,24 +84,29 @@ export function vueOnigiriPluginFactory(options = {}) {
               if (info) {
                 info.exports.push(exportName);
               } else {
-                if (isProduction) {
-                  const emitted = this.emitFile({
-                    type: "chunk",
-                    id,
-                    preserveSignature: "strict"
-                  });
-                  clientChunks.push({
-                    originalPath: normalizePath(id),
-                    id: emitted,
-                    exports: [exportName]
-                  });
-                } else {
-                  clientChunks.push({
-                    originalPath: normalizePath(id),
-                    id: normalizePath(join(clientAssetsDir, relative(rootDir, id))),
-                    exports: [exportName]
-                  });
-                }
+                  const clientSideChunk = clientChunks.find((chunk) => chunk.originalPath === normalizePath(id));
+              
+                  if (isProduction) {
+                    
+                    // const emitted = this.emitFile({
+                    //   type: "chunk",
+                    //   id: VSC_PREFIX + id,
+                    //   preserveSignature: "strict",
+                    // });
+                    serverChunks.push({
+                      originalPath: normalizePath(id),
+                      id: hash(id),
+                      exports: [exportName],
+                      clientSideChunk: clientSideChunk?.filename
+                    });
+                  } else   {
+                    serverChunks.push({
+                      originalPath: normalizePath(id),
+                      id: normalizePath(join(clientAssetsDir, relative(rootDir, id))),
+                      exports: [exportName],
+                      clientSideChunk: clientSideChunk?.filename,
+                    });
+                  }
               }
             }
           }));
@@ -119,7 +142,7 @@ export function vueOnigiriPluginFactory(options = {}) {
                   start,
                   end,
                   `Object.assign(${code.slice(start, end)},
-                                    { __chunk: "${normalizePath(join("/", isProduction ? join(clientAssetsDir, normalize(ref.id)) : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)}  },
+                                    { __chunk: "${normalizePath(join("/", isProduction ? ref.id : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)}  },
                                      
                                 )`
                 );
@@ -146,6 +169,17 @@ export function vueOnigiriPluginFactory(options = {}) {
             data.filename = this.getFileName(data.id);
           }
         }
+      },
+      {
+        name: "vue-onigiri:resolve",
+        resolveId(id, importer, opts) {
+          if( VSC_PREFIX_RE.test(id) ) {
+            return this.resolve(id.replace(VSC_PREFIX, ""), importer?.replace(VSC_PREFIX_RE, ""), opts);
+          }
+          if(id === 'virtual:vue-onigiri') {
+            return id;
+          }
+        }
       }
     ],
     server: (opts) => [
@@ -205,7 +239,7 @@ export function vueOnigiriPluginFactory(options = {}) {
         },
         resolveId: {
           order: "pre",
-          async handler(id, importer) {
+          async handler(id, importer, opts) {
             if (id === "virtual:vue-onigiri") {
               return id;
             }
@@ -216,24 +250,24 @@ export function vueOnigiriPluginFactory(options = {}) {
               if (id.endsWith(".vue")) {
                 const resolved = await this.resolve(
                   id,
-                  importer.replace(VSC_PREFIX_RE, "")
+                  importer.replace(VSC_PREFIX_RE, ""),
+                  opts
                 );
                 if (resolved) {
                   return VSC_PREFIX + resolved.id;
                 }
               }
-              return this.resolve(id, importer.replace(VSC_PREFIX_RE, ""), {
-                skipSelf: true
-              });
+              return this.resolve(id, importer.replace(VSC_PREFIX_RE, ""), opts);
             }
             if (id.endsWith(".ts") || id.endsWith(".tsx") || id.endsWith(".js") || id.endsWith(".jsx")) {
-              return this.resolve(id.replace(VSC_PREFIX_RE, ""), importer?.replace(VSC_PREFIX_RE, ""));
+              return this.resolve(id.replace(VSC_PREFIX_RE, ""), importer?.replace(VSC_PREFIX_RE, ""), opts);
             }
             if (VSC_PREFIX_RE.test(id)) {
               if (id.replace(VSC_PREFIX_RE, "").startsWith("./")) {
                 const resolved = await this.resolve(
                   id.replace(VSC_PREFIX_RE, ""),
-                  importer?.replace(VSC_PREFIX_RE, "")
+                  importer?.replace(VSC_PREFIX_RE, ""),
+                  opts
                 );
                 if (resolved) {
                   return VSC_PREFIX + resolved?.id;
@@ -261,14 +295,11 @@ export function vueOnigiriPluginFactory(options = {}) {
               const list = serverChunks.values().map((ref) => ref.id).toArray();
               if (list.includes(chunk.fileName)) {
                 chunk.isEntry = false;
-                chunk.isImplicitEntry = true;
-                chunk.isDynamicEntry = true;
+                chunk.isImplicitEntry = false;
+                chunk.isDynamicEntry = false;
               }
             }
-          }
-          for (const chunk of serverChunks) {
-            chunk.serverChunkPath = this.getFileName(chunk.id);
-          }
+          } 
         },
         transform: {
           order: "post",
@@ -285,16 +316,21 @@ export function vueOnigiriPluginFactory(options = {}) {
                   return node.type === "ExportNamedDeclaration" && node.specifiers.some((specifier) => specifier.exported.type === "Identifier" && specifier.exported.name === exportName);
                 });
                 if (exportNode) {
-                  const { start, end } = exportNode.declaration;
-                  s.overwrite(
-                    start,
-                    end,
-                    `Object.assign( ${code.slice(start, end)},
-                                    { __chunk: "${normalizePath(join("/", isProduction ? normalize(ref.filename) : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)} },
-                                    
-                                )`
-                  );
-                }
+                                  if (exportNode.declaration) {
+                
+                                  const { start, end } = exportNode.declaration; 
+                                    s.overwrite(
+                                      start,
+                                      end,
+                                      `Object.assign( ${code.slice(start, end)},
+                                                      { __chunk: "${normalizePath(join("/", isProduction ? normalize(ref.filename) : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)} },
+                                                      
+                                                  )`,
+                                    );
+                                  } else { 
+                                    // todo
+                                  }
+                                }
               }
               if (s.hasChanged()) {
                 return {
