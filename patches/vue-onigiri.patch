diff --git a/dist/runtime/serialize.js b/dist/runtime/serialize.js
index ee4dc49168846a9f070b8271ec8655edd03386ff..73cbcffcadb58e4eb092c196f4577370171755b5 100644
--- a/dist/runtime/serialize.js
+++ b/dist/runtime/serialize.js
@@ -28,6 +28,7 @@ export function serializeApp(app, context = {}) {
   const vnode = createVNode(input._component, input._props);
   const instance = createComponentInstance(vnode, input._instance, null);
   instance.appContext = input._context;
+  instance.provides = /* @__PURE__ */ Object.create(input._context.provides);
   return app.runWithContext(async () => {
     const res = await setupComponent(instance, true);
     return await app.runWithContext(async () => {
@@ -56,6 +57,7 @@ export function serializeApp(app, context = {}) {
           })
         );
       }
+      debugger;
       return serializeVNode(child, instance).then((result) => {
         if (result) {
           return unrollServerComponentBufferPromises(result);
@@ -106,7 +108,10 @@ export async function serializeVNode(vnode, parentInstance) {
     } else if (vnode.shapeFlag & ShapeFlags.COMPONENT) {
       return Promise.resolve(renderComponent(vnode, parentInstance)).then(
         (child) => {
+          console.log("child is component, ", child);
+          debugger;
           if (child._onigiriLoadClient) {
+            console.log("child, ", child);
             if (vnode.type.__chunk && vnode.type.__export) {
               return [
                 VServerComponentType.Component,
@@ -122,7 +127,7 @@ export async function serializeVNode(vnode, parentInstance) {
           }
           return [
             VServerComponentType.Fragment,
-            serializeChildren(child.children, parentInstance)
+            serializeChildren(child, parentInstance)
           ];
         }
       );
@@ -206,6 +211,21 @@ function renderComponent(_vnode, parentInstance) {
     parentInstance ?? null,
     null
   );
+  const reconstructedSlots = {};
+  for (const key in instance.vnode.children) {
+    const fn = instance.vnode.children[key];
+    if (typeof fn !== "function") {
+      reconstructedSlots[key] = fn;
+      continue;
+    }
+    reconstructedSlots[key] = (ctx, ...args) => {
+      const result = fn(ctx, ...args);
+      instance.__slotsResult = instance.__slotsResult || {};
+      instance.__slotsResult[key] = result;
+      return result;
+    };
+  }
+  instance.vnode.children = reconstructedSlots;
   const res = setupComponent(instance, true);
   const hasAsyncSetup = isPromise(res);
   let prefetches = (
@@ -230,16 +250,23 @@ function renderComponent(_vnode, parentInstance) {
         vnode.props = applySSRDirectives(vnode, props2, dirs2);
       }
       vnode.__slotsResult = instance.__slotsResult;
-      return vnode;
+      if (child.shapeFlag & ShapeFlags.COMPONENT) {
+        return renderComponent(child, parentInstance);
+      }
+      return vnode.children;
     });
   }
   const child = renderComponentRoot(instance);
+  debugger;
   const { dirs, props } = child;
   if (dirs) {
     child.props = applySSRDirectives(child, props, dirs);
   }
   child.__slotsResult = instance.__slotsResult;
-  return child;
+  if (child.shapeFlag & ShapeFlags.COMPONENT) {
+    return renderComponent(child, instance);
+  }
+  return isVNode(child.children) ? child.children : child;
 }
 function applySSRDirectives(vnode, rawProps, dirs) {
   const toMerge = [];
diff --git a/dist/runtime/utils.d.ts b/dist/runtime/utils.d.ts
index f1fa74dc5069732fe24b3bf402deb6a02f03597c..d321453a49dd208bfd9c6111d4beeb0c9c9aafb4 100644
--- a/dist/runtime/utils.d.ts
+++ b/dist/runtime/utils.d.ts
@@ -1,3 +1,4 @@
-import type { DefineComponent } from "vue";
+import type { DefineComponent, Directive } from "vue";
 export type ImportFn = (src: string, exportName?: string) => Promise<DefineComponent>;
 export declare const defaultImportFn: ImportFn;
+export declare const loadClientDirective: Directive;
diff --git a/dist/runtime/utils.js b/dist/runtime/utils.js
index 6907f81b21b9312bf8a1b6df6dc5916d7b1fc7b9..0baaa239a7e111e879983e6ba9cf4faf2eec124f 100644
--- a/dist/runtime/utils.js
+++ b/dist/runtime/utils.js
@@ -1 +1,16 @@
-export const defaultImportFn = (src, exportName = "default") => import(src).then((m) => m[exportName]);
+const componentsImports = () => import("virtual:vue-onigiri");
+export const defaultImportFn = (src, exportName = "default") => componentsImports().then((mod) => (mod.default ?? mod)[`${src}#${exportName}`]);
+export const loadClientDirective = {
+  getSSRProps(binding, vnode) {
+    if (binding.value !== false) {
+      vnode._onigiriLoadClient = true;
+    }
+    return {};
+  },
+  created(_, binding, vnode) {
+    if (binding.value !== false) {
+      vnode._onigiriLoadClient = true;
+    }
+    return binding;
+  }
+};
diff --git a/dist/vite/chunk.js b/dist/vite/chunk.js
index bbf89c47dba800aef026ca58b56de6bc40eef382..604802044f92a127423fc826ff26efcafd732313 100644
--- a/dist/vite/chunk.js
+++ b/dist/vite/chunk.js
@@ -11,7 +11,7 @@ const VSC_PREFIX = "virtual:vsc:";
 const VSC_PREFIX_RE = /^(\/?@id\/)?virtual:vsc:/;
 const NOVSC_PREFIX_RE = /^(\/?@id\/)?(?!virtual:vsc:)/;
 export function vueOnigiriPluginFactory(options = {}) {
-  const { serverAssetsDir = "", clientAssetsDir = "", rootDir = "" } = options;
+  let { serverAssetsDir = "", clientAssetsDir = "", rootDir = "" } = options;
   const clientChunks = [];
   const serverChunks = [];
   let assetDir = clientAssetsDir;
@@ -49,7 +49,7 @@ export function vueOnigiriPluginFactory(options = {}) {
           }
           isProduction = config.isProduction;
           if (!rootDir) {
-            options.rootDir = config.root;
+            rootDir = config.root;
           }
         },
         async buildStart() {
@@ -91,7 +91,7 @@ export function vueOnigiriPluginFactory(options = {}) {
         transform: {
           order: "post",
           async handler(code, id) {
-            const shouldTransform = VSC_PREFIX_RE.test(id) || clientChunks.some((chunk) => chunk.id === id);
+            const shouldTransform = VSC_PREFIX_RE.test(id) || clientChunks.some((chunk) => chunk.originalPath === id);
             if (!shouldTransform) {
               return;
             }
@@ -112,15 +112,21 @@ export function vueOnigiriPluginFactory(options = {}) {
                 })
               ];
             });
-            for (const [exportName, exportNode] of exportNodes) {
+            for (const exportName of ref.exports) {
+              const exportNode = ast.body.find((node) => {
+                if (exportName === "default") {
+                  return node.type === "ExportDefaultDeclaration";
+                }
+                return node.type === "ExportNamedDeclaration" && node.specifiers.some((specifier) => specifier.exported.type === "Identifier" && specifier.exported.name === exportName);
+              });
               if (exportNode) {
-                const { start, end } = exportNode;
+                const { start, end } = exportNode.declaration;
                 s.overwrite(
                   start,
                   end,
-                  `Object.assign(${code.slice(start, end)},
-                                    { __chunk: "${normalizePath(join("/", isProduction ? join(clientAssetsDir, normalize(ref.id)) : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)}  },
-                                     
+                  `Object.assign( ${code.slice(start, end)},
+                                    { __chunk: "${normalizePath(join("/", isProduction ? normalize(ref.filename) : relative(rootDir, normalize(ref.id))))}", __export: ${JSON.stringify(exportName)} },
+                                    
                                 )`
                 );
               }
@@ -146,6 +152,28 @@ export function vueOnigiriPluginFactory(options = {}) {
             data.filename = this.getFileName(data.id);
           }
         }
+      },
+      {
+        name: "load:vue-onigiri",
+        resolveId(id) {
+          if (id === "virtual:vue-onigiri") {
+            return id;
+          }
+        },
+        load(id) {
+          if (id === "virtual:vue-onigiri") {
+            return `
+              import { defineAsyncComponent } from "vue";
+              export default {
+                ${clientChunks.map(
+              (chunk) => chunk.exports.map(
+                (exportName) => `"${normalizePath(join("/", isProduction ? normalize(chunk.id) : relative(rootDir, normalize(chunk.id))))}#${exportName}": defineAsyncComponent(() => import("${chunk.originalPath}").then(m => m.${exportName}))`
+              ).join(",\n")
+            ).join(",\n")}
+              }
+              `;
+          }
+        }
       }
     ],
     server: (opts) => [
@@ -306,26 +334,6 @@ export function vueOnigiriPluginFactory(options = {}) {
           }
         }
       },
-      {
-        name: "vue-onigiri:renderSSRSlotReplace",
-        transform: {
-          order: "post",
-          handler(code, id) {
-            if (VSC_PREFIX_RE.test(id)) {
-              const s = new MagicString(code);
-              s.prepend(
-                `import { renderSlot as cryoRenderSlot } from 'vue-onigiri/runtime/render-slot';
-`
-              );
-              s.replace(/_renderSlot\(/g, "cryoRenderSlot(_ctx,");
-              return {
-                code: s.toString(),
-                map: s.generateMap({ hires: true }).toString()
-              };
-            }
-          }
-        }
-      },
       {
         name: "vue:onigiri:loadvirtual",
         load(id) {
